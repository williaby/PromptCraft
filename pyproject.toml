[build-system]
requires = ["poetry-core>=1.9.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

# Project metadata (PEP 621 standard)
[project]
name = "promptcraft-hybrid"
version = "0.1.0"
description = "A Zen-powered AI workbench for transforming queries into accurate, context-aware outputs"
authors = [{name = "PromptCraft Team", email = "team@promptcraft.io"}]
license = {text = "MIT"}
readme = "README.md"
keywords = ["ai", "prompt-engineering", "mcp", "zen", "orchestration"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11,<3.13"
dynamic = ["dependencies"]

[project.urls]
homepage = "https://github.com/williaby/PromptCraft"
repository = "https://github.com/williaby/PromptCraft"
documentation = "https://github.com/williaby/PromptCraft/wiki"

# Poetry-specific configuration
[tool.poetry]
package-mode = false
requires-poetry = ">=1.8.0"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
# Main dependencies
gradio = "^5.35.0"
fastapi = "^0.116.0"
uvicorn = {extras = ["standard"], version = "^0.35.0"}
httpx = "^0.27.0"
pydantic = ">=2.11.0,<3.0.0"
pydantic-settings = "^2.2.1"
anthropic = "^0.57.0"
openai = "^1.12.0"
qdrant-client = "^1.14.3"
cryptography = "^45.0.0"
pyjwt = {version = "^2.10.1", extras = ["crypto"]}
python-gnupg = "^0.5.2"
pyyaml = "^6.0.2"
toml = "^0.10.2"
python-multipart = "^0.0.18"
redis = {extras = ["hiredis"], version = "^6.0.0"}
prometheus-client = "^0.20.0"
python-dotenv = "^1.0.1"
python-magic = "^0.4.27"
structlog = ">=24.0.0,<26.0.0"
rich = "^14.0.0"
tenacity = "^9.0.0"
python-dateutil = "^2.9.0"
aiofiles = ">=24.1.0,<25.0.0"
asyncer = ">=0.0.5,<1.0.0"
mcp = "~1.13.0"
sentry-sdk = ">=2.0.0,<3.0.0"
opentelemetry-api = "^1.25.0"
typing-extensions = ">=4.10.0,<5.0.0"
slowapi = "^0.1.9"
cachetools = "^6.1.0"
defusedxml = "^0.7.1"
starlette = "~0.47.2"
# Database dependencies for AUTH-1 enhanced authentication and AUTH-2 service token management
sqlalchemy = {extras = ["asyncio"], version = "^2.0.36"}
asyncpg = "^0.30.0"
alembic = "^1.14.0"
aiohttp = "^3.12.15"
plotly = "^6.3.0"
pandas = "^2.3.1"
jinja2 = "^3.1.6"
h2 = "^4.3.0"

[tool.poetry.group.dev.dependencies]
pytest = ">=8.0.1"
pytest-asyncio = ">=0.26.0"
pytest-cov = ">=6.0.0"
pytest-env = ">=1.1.3"
pytest-mock = ">=3.12.0"
pytest-timeout = ">=2.2.0"
pytest-xdist = ">=3.5.0"
hypothesis = ">=6.98.9"
faker = ">=37.0.0"
black = ">=25.0.0"
ruff = ">=0.12.0"
mypy = ">=1.8.0"
types-pyyaml = ">=6.0.12.12"
types-python-dateutil = ">=2.8.19.20240106"
types-aiofiles = ">=24.0.0"
bandit = {extras = ["toml"], version = ">=1.7.7"}
safety = ">=3.0.1"
detect-secrets = ">=1.5.0"
pre-commit = ">=4.0.0"
nox = ">=2025.1.0"
ipython = ">=9.0.0"
ipdb = ">=0.13.13"

[tool.poetry.group.azure.dependencies]
azure-identity = "^1.15.0"
azure-keyvault-secrets = "^4.8.0"
azure-storage-blob = "^12.19.0"

[tool.poetry.group.ml.dependencies]
sentence-transformers = ">=3.0.0,<6.0.0"
tiktoken = ">=0.8.0,<1.0.0"
numpy = ">=2.0.0,<3.0.0"
pandas = "^2.2.0"
spacy = ">=3.7.0,<4.0.0"
nltk = ">=3.8.0,<4.0.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.32"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[tool.poetry.group.test.dependencies]
pytest-benchmark = ">=4.0.0"
pytest-memray = ">=1.5.0"


[[tool.poetry.source]]
name = "safety"
url = "https://pkgs.safetycli.com/repository/williams-consulting/project/promptcraft/pypi/simple/"
priority = "supplemental"

[tool.black]
line-length = 120
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.nox
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.ruff]
line-length = 120
target-version = "py312"
src = ["src", "tests"]
exclude = [
    "*.yaml",
    "*.yml",
    "docker-compose*.yaml",
    "docker-compose*.yml",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "RUF", # ruff-specific
]
ignore = [
    "E501",    # line too long (handled by black)
    "B008",    # do not perform function calls in argument defaults
    "C901",    # too complex
    "ANN101",  # missing type annotation for self
    "ANN102",  # missing type annotation for cls
    "ANN401",  # dynamically typed expressions (Any)
    "S101",    # use of assert detected
    "PLR0913", # too many arguments
    "BLE001",  # blind exception catching (needed for generic error handlers)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ANN", "ARG", "PLR2004"]
"scripts/*" = ["T20", "INP001"]
"noxfile.py" = ["ANN", "D"]
"*.yaml" = ["ALL"]
"*.yml" = ["ALL"]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "gradio.*",
    "sentence_transformers.*",
    "qdrant_client.*",
    "redis.*",
    "yaml.*",
    "gnupg.*",
    "mcp.*",
    "spacy.*",
    "nltk.*",
    "sentry_sdk.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
-ra
--strict-markers
--strict-config
--cov=src
--cov-branch
--cov-report=term-missing:skip-covered
--cov-report=html
--cov-report=xml
--cov-fail-under=80
"""
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "scripts"]
skips = ["B101"]

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*_test.py"]

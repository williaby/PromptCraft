[tool.poetry]
name = "promptcraft-hybrid"
version = "0.1.0"
description = "A Zen-powered AI workbench for transforming queries into accurate, context-aware outputs"
authors = ["PromptCraft Team <team@promptcraft.io>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/williaby/PromptCraft"
repository = "https://github.com/williaby/PromptCraft"
documentation = "https://github.com/williaby/PromptCraft/wiki"
keywords = ["ai", "prompt-engineering", "mcp", "zen", "orchestration"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{include = "src"}]

[[tool.poetry.source]]
name = "assured-oss"
url = "https://us-python.pkg.dev/assured-oss/python-packages/simple/"
priority = "supplemental"

[tool.poetry.dependencies]
python = "^3.11"

# Security-Critical Packages - Patch-level pinning (ADR-009)
# Web framework components handling user input and authentication
gradio = ">=5.31.0,<6.0.0"  # UI framework with user interaction (security update)
fastapi = ">=0.115.0,<0.116.0"  # Web framework handling HTTP requests
uvicorn = {extras = ["standard"], version = ">=0.35.0,<0.36.0"}  # ASGI server
httpx = ">=0.28.0,<0.29.0"  # HTTP client for external API calls
pydantic = ">=2.11.0,<3.0.0"  # Data validation and input sanitization (MCP compatible)
pydantic-settings = ">=2.2.1,<3.0.0"  # Settings management

# AI/ML service integrations with API keys
anthropic = ">=0.57.0,<0.58.0"  # AI service integration
openai = ">=1.12.0,<1.13.0"  # OpenAI API integration
qdrant-client = ">=1.8.0,<1.9.0"  # Vector database client

# Azure cloud services with authentication
azure-identity = ">=1.15.0,<1.16.0"  # Identity and authentication
azure-keyvault-secrets = ">=4.8.0,<4.9.0"  # Secrets management
azure-storage-blob = ">=12.19.0,<12.20.0"  # Cloud storage access

# Security-critical cryptographic libraries
cryptography = ">=45.0.0,<46.0.0"  # Core cryptographic operations (security update)
pyjwt = {extras = ["crypto"], version = ">=2.8.0,<2.9.0"}  # JWT handling
python-gnupg = ">=0.5.2,<0.6.0"  # GPG operations for .env encryption

# Core Framework Packages - Minor-level pinning (ADR-009)
# ML/NLP processing components
sentence-transformers = ">=5.0.0,<6.0.0"  # Embedding generation
tiktoken = ">=0.9.0,<1.0.0"  # Token counting utilities

# Data processing utilities
numpy = ">=2.0.0,<3.0.0"  # Numerical computing
pandas = ">=2.2.0,<3.0.0"  # Data manipulation
pyyaml = ">=6.0.1,<7.0.0"  # YAML processing
python-multipart = ">=0.0.18,<1.0.0"  # Multipart form handling (security update)

# Infrastructure components
redis = {extras = ["hiredis"], version = ">=6.0.0,<7.0.0"}  # Caching layer
prometheus-client = ">=0.20.0,<1.0.0"  # Metrics collection
python-dotenv = ">=1.0.1,<2.0.0"  # Environment configuration

# Logging and monitoring
structlog = ">=25.0.0,<26.0.0"  # Structured logging
rich = ">=14.0.0,<15.0.0"  # Rich text formatting

# Utilities
tenacity = ">=9.0.0,<10.0.0"  # Retry mechanisms
python-dateutil = ">=2.8.2,<3.0.0"  # Date utilities
aiofiles = ">=24.0.0,<25.0.0"  # Async file operations
asyncer = ">=0.0.5,<1.0.0"  # Async utilities

# Missing Critical Dependencies - Added for MCP architecture
mcp = ">=1.0.0,<2.0.0"  # MCP protocol client for Zen server integration
spacy = ">=3.7.0,<4.0.0"  # NLP processing for HyDE query enhancement
nltk = ">=3.8.0,<4.0.0"  # Natural language utilities
detect-secrets = ">=1.5.0,<2.0.0"  # Security scanning
sentry-sdk = ">=2.0.0,<3.0.0"  # Error monitoring and alerting
opentelemetry-api = ">=1.25.0,<2.0.0"  # Observability and tracing
tomli = "^2.2.1"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.0.1"
pytest-asyncio = "^0.26.0"
pytest-cov = "^6.0.0"
pytest-env = "^1.1.3"
pytest-mock = "^3.12.0"
pytest-timeout = "^2.2.0"
pytest-xdist = "^3.5.0"
hypothesis = "^6.98.9"
faker = "^37.0.0"

# Code quality
black = "^25.0.0"
ruff = "^0.12.0"
mypy = "^1.8.0"
types-pyyaml = "^6.0.12.12"
types-python-dateutil = "^2.8.19.20240106"
types-aiofiles = "^24.0.0"

# Security scanning
bandit = {extras = ["toml"], version = "^1.7.7"}
safety = "^3.0.1"

# Documentation
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.9"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

# Development tools
pre-commit = "^4.0.0"
nox = "^2025.1.0"
ipython = "^9.0.0"
ipdb = "^0.13.13"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest-benchmark = "^4.0.0"
pytest-memray = "^1.5.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.nox
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.ruff]
line-length = 88
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "RUF", # ruff-specific
]
ignore = [
    "E501",    # line too long (handled by black)
    "B008",    # do not perform function calls in argument defaults
    "C901",    # too complex
    "ANN101",  # missing type annotation for self
    "ANN102",  # missing type annotation for cls
    "ANN401",  # dynamically typed expressions (Any)
    "S101",    # use of assert detected
    "PLR0913", # too many arguments
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ANN", "ARG", "PLR2004"]
"scripts/*" = ["T20", "INP001"]
"noxfile.py" = ["ANN", "D"]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "gradio.*",
    "sentence_transformers.*",
    "qdrant_client.*",
    "redis.*",
    "yaml.*",
    "gnupg.*",
    "mcp.*",
    "spacy.*",
    "nltk.*",
    "sentry_sdk.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
-ra
--strict-markers
--strict-config
--cov=src
--cov-branch
--cov-report=term-missing:skip-covered
--cov-report=html
--cov-report=xml
--cov-fail-under=80
"""
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*_test.py"]

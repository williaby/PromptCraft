# Fixed CI Configuration
# Addresses cache validation errors and PATH issues in Enhanced Setup

name: CI (Fixed)

on:
  workflow_dispatch:  # Manual trigger for testing
  pull_request:
    branches:
      - main
      - 'feature/phase-1-development'

permissions:
  contents: read
  pull-requests: write
  issues: write
  packages: write

concurrency:
  group: ci-fixed-${{ github.ref }}
  cancel-in-progress: true

env:
  CI_ENVIRONMENT: true
  PROMPTCRAFT_REDIS_HOST: localhost
  PROMPTCRAFT_QDRANT_HOST: localhost
  PROMPTCRAFT_ENABLE_SERVICE_MOCKING: true
  POETRY_VERSION: 2.1.2
  POETRY_CACHE_DIR: ~/.cache/pypoetry
  POETRY_VENV_IN_PROJECT: true
  MYPY_CACHE_DIR: ~/.cache/mypy

jobs:
  # Fixed Enhanced Setup
  setup-optimized:
    name: Enhanced Setup (Fixed)
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Slightly increased for robustness
    outputs:
      poetry-hash: ${{ steps.cache-key.outputs.poetry-hash }}
      requirements-hash: ${{ steps.cache-key.outputs.requirements-hash }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate cache keys
        id: cache-key
        run: |
          POETRY_HASH="${{ hashFiles('**/poetry.lock') }}"
          REQUIREMENTS_HASH="${{ hashFiles('requirements*.txt') }}"

          # Validate that files exist
          if [[ -z "$POETRY_HASH" ]]; then
            echo "‚ùå No poetry.lock found"
            exit 1
          fi

          echo "poetry-hash=$POETRY_HASH" >> $GITHUB_OUTPUT
          echo "requirements-hash=$REQUIREMENTS_HASH" >> $GITHUB_OUTPUT
          echo "‚úÖ Cache keys generated: poetry=$POETRY_HASH"

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Create cache directories before caching
      - name: Prepare cache directories
        run: |
          echo "üìÇ Creating cache directories..."
          mkdir -p ~/.local/share/pypoetry
          mkdir -p ~/.cache/pypoetry
          mkdir -p ~/.cache/mypy
          mkdir -p .venv
          echo "‚úÖ Cache directories created"

      # Install Poetry with proper verification
      - name: Install Poetry
        run: |
          echo "üì¶ Installing Poetry ${{ env.POETRY_VERSION }}..."
          curl -sSL https://install.python-poetry.org | python3 -

          # Add to PATH for current step
          export PATH="$HOME/.local/bin:$PATH"

          # Add to GitHub PATH for subsequent steps
          echo "$HOME/.local/bin" >> $GITHUB_PATH

          # Verify installation
          if ! command -v poetry &> /dev/null; then
            echo "‚ùå Poetry installation failed"
            exit 1
          fi

          poetry --version
          echo "‚úÖ Poetry installed successfully"

      # Configure Poetry in separate step to ensure PATH is updated
      - name: Configure Poetry
        run: |
          echo "‚öôÔ∏è Configuring Poetry..."
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry config --list
          echo "‚úÖ Poetry configured"

      # Install Poetry plugin with error handling
      - name: Install Poetry plugins
        run: |
          echo "üîå Installing Poetry plugins..."
          if ! poetry self add poetry-plugin-export; then
            echo "‚ö†Ô∏è  Poetry plugin installation failed, continuing without export plugin"
          else
            echo "‚úÖ Poetry plugins installed"
          fi

      # Cache with proper paths
      - name: Cache Poetry and dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/pypoetry
            ~/.cache/pypoetry
            .venv
          key: poetry-deps-${{ runner.os }}-${{ steps.cache-key.outputs.poetry-hash }}
          restore-keys: |
            poetry-deps-${{ runner.os }}-

      # Install dependencies with retry logic
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."

          # Function to attempt installation
          install_deps() {
            poetry install --sync --no-interaction
          }

          # Try installation, with fallback
          if ! install_deps; then
            echo "‚ö†Ô∏è  Installation failed, clearing cache and retrying..."
            poetry cache clear --all pypi -n 2>/dev/null || true
            rm -rf .venv 2>/dev/null || true

            if ! install_deps; then
              echo "‚ùå Dependency installation failed"
              exit 1
            fi
          fi

          echo "‚úÖ Dependencies installed successfully"

      # Cache MyPy stubs with proper directory
      - name: Cache MyPy stubs
        uses: actions/cache@v4
        with:
          path: ~/.cache/mypy
          key: mypy-stubs-${{ runner.os }}-${{ steps.cache-key.outputs.poetry-hash }}
          restore-keys: |
            mypy-stubs-${{ runner.os }}-

      # Pre-install MyPy stubs
      - name: Pre-install MyPy stubs
        run: |
          echo "üîß Pre-installing MyPy stubs..."
          poetry run python -m pip install types-requests types-pyyaml types-redis types-python-dateutil || true
          poetry run mypy --install-types --non-interactive --cache-dir=${{ env.MYPY_CACHE_DIR }} src/ || true
          echo "‚úÖ MyPy stubs preparation complete"

  # Test the fixed setup
  test-fixed-setup:
    name: Test Fixed Setup
    runs-on: ubuntu-latest
    needs: setup-optimized
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Restore dependency cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.local/share/pypoetry
            ~/.cache/pypoetry
            .venv
          key: poetry-deps-${{ runner.os }}-${{ needs.setup-optimized.outputs.poetry-hash }}
          restore-keys: |
            poetry-deps-${{ runner.os }}-

      - name: Verify setup works
        run: |
          poetry --version
          poetry config --list

          # Test that dependencies are available
          if [[ -d ".venv" ]]; then
            echo "‚úÖ Virtual environment found"
            poetry run python --version
            echo "‚úÖ Setup verification complete"
          else
            echo "‚ö†Ô∏è  No virtual environment found, installing dependencies..."
            poetry install --sync --no-interaction
            poetry run python --version
            echo "‚úÖ Setup verification complete (with fresh install)"
          fi

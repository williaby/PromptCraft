name: CI Clean

on:
  push:
    branches: [ main, 'feature/**' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependency-check:
    name: Verify Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Poetry Export Plugin
        run: poetry self add poetry-plugin-export || echo "Plugin installation failed, continuing..."

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.11-

      - name: Verify poetry lock file
        run: poetry check --lock

      - name: Install dependencies
        run: poetry install

      - name: Export requirements with hashes
        run: ./scripts/generate_requirements.sh

      - name: Test pip installation
        run: |
          python -m venv test-env
          source test-env/bin/activate
          pip install --require-hashes -r requirements.txt
          deactivate
          rm -rf test-env

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: always()
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Poetry Export Plugin
        run: poetry self add poetry-plugin-export || echo "Plugin installation failed, continuing..."

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Export and install dependencies
        run: |
          poetry export --format=requirements.txt --output=requirements-ci.txt
          poetry run pip install --require-hashes -r requirements-ci.txt

      - name: Run tests
        run: poetry run pytest -v --cov=src --cov-report=xml --cov-report=term-missing
        env:
          CI_ENVIRONMENT: true
          PROMPTCRAFT_REDIS_HOST: localhost
          PROMPTCRAFT_QDRANT_HOST: localhost
          PROMPTCRAFT_ENABLE_SERVICE_MOCKING: true

      - name: Run type checking
        run: poetry run mypy src

      - name: Run linting
        run: |
          poetry run black . --check
          poetry run ruff check .

      - name: Upload coverage to Codecov
        if: secrets.CODECOV_TOKEN
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

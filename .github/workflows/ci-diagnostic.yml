name: CI Diagnostic Test

on:
  push:
    branches: [ 'feature/phase-1-issue-CI-1-fix-ci-test-failures' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependency-check:
    name: Verify Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Poetry Export Plugin
        run: poetry self add poetry-plugin-export || echo "Plugin installation failed, continuing..."

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.11-

      - name: Verify poetry.lock is up to date
        run: |
          poetry check --lock || {
            echo "::error::Poetry lock check failed. Debug info:"
            echo "Poetry version: $(poetry --version)"
            echo "Lock file exists: $(test -f poetry.lock && echo 'Yes' || echo 'No')"
            echo "Lock file size: $(wc -l poetry.lock 2>/dev/null || echo 'Cannot read')"
            exit 1
          }

      - name: Install dependencies for export
        run: |
          poetry install || {
            echo "::error::Poetry install failed. Debug info:"
            echo "Poetry version: $(poetry --version)"
            echo "Python version: $(python --version)"
            echo "Virtual environment: ${VIRTUAL_ENV:-Not activated}"
            echo "Poetry config: $(poetry config --list | head -5)"
            exit 1
          }

      - name: Export requirements with hashes
        run: |
          ./scripts/generate_requirements.sh || {
            echo "::error::Requirements generation failed. Debug info:"
            echo "Poetry version: $(poetry --version)"
            echo "Python version: $(python --version)"
            echo "Working directory: $(pwd)"
            echo "Lock file exists: $(test -f poetry.lock && echo 'Yes' || echo 'No')"
            echo "Dependencies count: $(poetry show 2>/dev/null | wc -l || echo 'Failed to list')"
            exit 1
          }

      - name: Verify requirements.txt hasn't changed
        if: github.ref == 'refs/heads/main'
        run: |
          git diff --exit-code requirements*.txt || {
            echo "::error::requirements files are out of sync."
            echo "Run ./scripts/generate_requirements.sh and commit the changes."
            exit 1
          }

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: always()
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Simple matrix test
        run: echo "Testing Python ${{ matrix.python-version }}"

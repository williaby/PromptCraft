name: CI

on:
  push:
    branches: [ 'feature/phase-1-development', 'feature/**' ]
  pull_request:
    branches: [ 'feature/phase-1-development' ]

permissions:
  contents: read
  pull-requests: write
  issues: write
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependency-check:
    name: Verify Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Poetry Export Plugin
        run: poetry self add poetry-plugin-export || echo "Plugin installation failed, continuing..."

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.11-

      - name: Verify poetry.lock is up to date
        run: poetry check --lock

      - name: Install dependencies for export
        run: poetry install

      - name: Export requirements with hashes
        run: ./scripts/generate_requirements.sh

      - name: Verify requirements.txt hasn't changed
        if: github.ref == 'refs/heads/feature/phase-1-development'
        run: |
          git diff --exit-code requirements*.txt || {
            echo "::error::requirements files are out of sync."
            echo "Run ./scripts/generate_requirements.sh and commit the changes."
            exit 1
          }

      - name: Test pip installation with hash verification
        run: |
          python -m venv test-env
          source test-env/bin/activate
          pip install --require-hashes -r requirements.txt
          deactivate
          rm -rf test-env

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Poetry Export Plugin
        run: poetry self add poetry-plugin-export || echo "Plugin installation failed, continuing..."

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.11-

      - name: Set up CI environment variables
        run: |
          echo "CI_ENVIRONMENT=true" >> $GITHUB_ENV
          echo "PROMPTCRAFT_REDIS_HOST=localhost" >> $GITHUB_ENV
          echo "PROMPTCRAFT_QDRANT_HOST=localhost" >> $GITHUB_ENV
          echo "PROMPTCRAFT_ENABLE_SERVICE_MOCKING=true" >> $GITHUB_ENV
          echo "CI environment configured with service mocking"

      - name: Start Redis service for testing
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis-server
          redis-cli ping || echo "Redis not started - will use mocking"
        continue-on-error: true

      - name: Install dependencies
        run: poetry install

      - name: Run safety check
        run: |
          echo "Running dependency vulnerability scan"
          poetry run safety check --json || echo "Safety vulnerability scan completed with findings"
        continue-on-error: true

      - name: Run bandit security scan
        run: |
          echo "Running Bandit security analysis"
          poetry run bandit -r src -ll -f json -o bandit-report.json || echo "Bandit security scan completed with findings"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            .safety-report.json

  test:
    name: CI / TestExpected
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Poetry Export Plugin
        run: poetry self add poetry-plugin-export || echo "Plugin installation failed, continuing..."

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.11-

      - name: Install dependencies for export
        run: poetry install --no-interaction --no-ansi

      - name: Install mypy type stubs
        run: poetry run mypy --install-types --non-interactive

      - name: Export and install dependencies with hash verification
        run: |
          poetry export --format=requirements.txt --output=requirements-ci.txt
          poetry run pip install --require-hashes -r requirements-ci.txt

      - name: Run tests with service mocking
        run: |
          echo "Running tests with CI environment configuration"
          poetry run pytest -v --cov=src --cov-report=xml --cov-report=term-missing
        env:
          CI_ENVIRONMENT: true
          PROMPTCRAFT_REDIS_HOST: localhost
          PROMPTCRAFT_QDRANT_HOST: localhost
          PROMPTCRAFT_ENABLE_SERVICE_MOCKING: true

      - name: Run type checking
        run: poetry run mypy src

      - name: Run linting
        run: |
          echo "Running code formatting and linting checks"
          poetry run black . --check
          poetry run ruff check .
          echo "All linting checks passed"

  test-matrix:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: always()
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Poetry Export Plugin
        run: poetry self add poetry-plugin-export || echo "Plugin installation failed, continuing..."

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies for export
        run: poetry install --no-interaction --no-ansi

      - name: Install mypy type stubs
        run: poetry run mypy --install-types --non-interactive

      - name: Export and install dependencies with hash verification
        run: |
          poetry export --format=requirements.txt --output=requirements-ci.txt
          poetry run pip install --require-hashes -r requirements-ci.txt

      - name: Run tests with service mocking
        run: |
          echo "Running tests with CI environment configuration"
          poetry run pytest -v --cov=src --cov-report=xml --cov-report=term-missing
        env:
          CI_ENVIRONMENT: true
          PROMPTCRAFT_REDIS_HOST: localhost
          PROMPTCRAFT_QDRANT_HOST: localhost
          PROMPTCRAFT_ENABLE_SERVICE_MOCKING: true

      - name: Run type checking
        run: poetry run mypy src

      - name: Run linting
        run: |
          echo "Running code formatting and linting checks"
          poetry run black . --check
          poetry run ruff check .
          echo "All linting checks passed"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: ${{ env.CODECOV_TOKEN != '' }}
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Coverage fallback notice
        if: ${{ env.CODECOV_TOKEN == '' }}
        run: |
          echo "⚠️  CODECOV_TOKEN not configured - Codecov upload may have been skipped"
          echo "Coverage reports available locally in htmlcov/"
          echo "To enable Codecov upload, add CODECOV_TOKEN secret to repository"

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [test]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Poetry Export Plugin
        run: poetry self add poetry-plugin-export || echo "Plugin installation failed, continuing..."

      - name: Install dependencies for export
        run: poetry install

      - name: Generate requirements for Docker
        run: ./scripts/generate_requirements.sh

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: promptcraft-hybrid:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
